name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
          requireScope: false

      - name: Check for large files
        run: |
          find . -type f -size +10M | grep -v node_modules | grep -v .git > large_files.txt || true
          if [ -s large_files.txt ]; then
            echo "⚠️ Large files detected:"
            cat large_files.txt
            exit 1
          fi

      - name: Check for sensitive data
        run: |
          # Check for potential secrets
          if grep -r -E "(password|secret|api_key|token).*=.*['\"]" . --exclude-dir={node_modules,.git,venv} | grep -v ".example" | grep -v "test"; then
            echo "⚠️ Potential sensitive data found!"
            exit 1
          fi

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python linters
        run: |
          pip install flake8 black pylint mypy

      - name: Run Python code quality checks
        run: |
          cd backend
          echo "Running flake8..."
          flake8 app --max-line-length=100 --count --statistics || true
          
          echo "Running black..."
          black --check app || true
          
          echo "Running pylint..."
          pylint app --fail-under=7.0 || true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint || true

  test-coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vc_test
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vc_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
        run: |
          cd backend
          pytest tests/ --cov=app --cov-report=term --cov-report=html

      - name: Comment coverage on PR
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: 80
          MINIMUM_ORANGE: 60
